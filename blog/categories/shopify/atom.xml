<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Shopify | Raúl Fuente Vallina]]></title>
  <link href="http://rfvallina.com/blog/categories/shopify/atom.xml" rel="self"/>
  <link href="http://rfvallina.com/"/>
  <updated>2016-06-05T16:37:36+02:00</updated>
  <id>http://rfvallina.com/</id>
  <author>
    <name><![CDATA[Raúl Fuente Vallina]]></name>
    <email><![CDATA[raul@rfvallina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tips to Customize Shopify Themes]]></title>
    <link href="http://rfvallina.com/blog/2016/06/05/customize-shopify-themes/"/>
    <updated>2016-06-05T10:37:21+02:00</updated>
    <id>http://rfvallina.com/blog/2016/06/05/customize-shopify-themes</id>
    <content type="html"><![CDATA[<p>Whether you are changing the look of your theme or you are adding a new feature not supported by your current theme you have to make changes on your theme files. Shopify gives some recommendations to achieve this in <a href="https://help.shopify.com/themes/customization">this post</a>.</p>

<!-- more -->


<p><img class="center" src="/images/blog/shopify.png"></p>

<h2>Before Start</h2>

<p>You have to make a copy of the theme you want to customize (usually the online one). You will keep making changes to the copy and previewing them till you are comfortable with the results.</p>

<p><img class="center" src="/images/blog/shopify_duplicate.png"></p>

<p>You have to be aware that changing the theme of the site can lead to problems on your site. Shopify has a support policy and <a href="https://help.shopify.com/themes/customization#getting-help">provides an explanation</a> about the <strong>supported</strong> and <strong>unsupported</strong> customizations. If you are about to do unsupported customizations you should ask a Shopify expert first.</p>

<h2>How to Edit</h2>

<p>Shopify does not provide FTP service to transfer theme files. They provide access to the store files through the admin portal and the database via the API though. But their systems are not accessible via ftp for security and data integrity.</p>

<p>If you want to edit the theme through the Admin portal, you have several options:</p>

<ol>
<li>Online editor</li>
</ol>


<p> <img class="center" src="/images/blog/shopify_customize_theme.png">
2. Edit HTML/CSS/JS files directly</p>

<p> With this method you would copy and paste the changes directly into the theme files.</p>

<p> <img class="center" src="/images/blog/shopify_edit_html_css.png">
3. External tool to sync theme files</p>

<p> Here you have a powerful tool to sync files in the way Dropbox does. <a href="https://github.com/Shopify/shopify_theme">https://github.com/Shopify/shopify_theme</a></p>

<h2>Publish</h2>

<p>Once you are satisfied with the results you&rsquo;d want to publish the changes. You have to press <strong>Publish theme</strong> button.</p>

<blockquote><p>Test the changes thoroughly before making them public. Although Shopify keeps history of the files and you could go back to an older version it&rsquo;s important you test your site in depth.</p></blockquote>

<h2>Use Git</h2>

<p>One of my recommendations is to use a <em>scm</em> (Source Control Management) system like <strong>Git</strong>. Consider using <strong>Bitbucket</strong>. It&rsquo;s free.</p>

<p>Before start you would make a copy of your theme on your local machine and setup a remote git repository.
As you make changes on the files you would be committing them to the remote repository. If, at some point in time you face any issue, at least you could review all changes made in the past and restore a specific version of a file.</p>

<p>There are interesting tools which allow you to make the whole process automatic, including deployments into Shopify. <a href="https://www.shopify.com/partners/blog/19752835-using-git-to-simplify-shopify-theme-deployment">Read this post for more information</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Verify Shopify Webhooks Using Node.js]]></title>
    <link href="http://rfvallina.com/blog/2015/11/22/verify-shopify-webhooks-using-node-dot-js/"/>
    <updated>2015-11-22T20:17:17+01:00</updated>
    <id>http://rfvallina.com/blog/2015/11/22/verify-shopify-webhooks-using-node-dot-js</id>
    <content type="html"><![CDATA[<p>As you might know if you have experience with the <a href="https://docs.shopify.com/api">Shopify API</a>, Shopify provides <strong>Webhooks</strong>, which is a tool for retrieving and storing data from a certain event. They even allow managing Webhooks through the API. For instance, if you want your application to be notified when a new order is placed in your store, you may register a Webhook for the <em>create/order</em> event.</p>

<!-- more -->


<p>But you might be wondering how to ensure that the incoming request actually comes from Shopify. The answer is yes, there&rsquo;s a way to guarantee that. Specially for security reasons, it&rsquo;s almost a must to verify webhooks. At the time of writing this there&rsquo;s no official documentation for <a href="https://docs.shopify.com/api/webhooks/using-webhooks#verify-webhook">verifying webhooks</a> in Node.js, so I&rsquo;m going to explain how to do it. It&rsquo;s pretty straightforward.</p>

<p>Webhooks can be verified by calculating a digital signature. Each Webhook request includes a <strong>X-Shopify-Hmac-SHA256</strong> header which is generated using the app&rsquo;s shared secret, along with the data sent in the request. To verify that the request came from Shopify, compute the HMAC digest according to the following algorithm and compare it to the value in the <strong>X-Shopify-Hmac-SHA256</strong> header. If they match, you can be sure that the Webhook was sent from Shopify and the data has not been compromised.</p>

<p>In this example I&rsquo;m going to use the <a href="http://expressjs.com/"><strong>Express</strong></a> framework with the <a href="https://www.npmjs.com/package/body-parser"><strong>body-parser</strong></a> middleware. Basically, what the code below is doing is verifying every incoming request. If the url path matches the one for my webhook event, then it calculates the signature. If the calculated signature matches the one that comes in the header it goes ahead processing the request. Otherwise it throws an error.</p>

<pre><code class="js">app.use(bodyParser.json({
    verify: function(req, res, buf, encoding) {
        if (req.url.search('shopify/webhook') &gt;= 0) {
            var calculated_signature = crypto.createHmac('sha256', 'SHOPIFY_SHARED_SECRET')
                .update(buf)
                .digest('base64');
            if (calculated_signature != req.headers['x-shopify-hmac-sha256']) {
                throw new Error('Invalid signature. Access denied');
            }
        }
    }
}));
</code></pre>
]]></content>
  </entry>
  
</feed>
