<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: node.js | Raúl Fuente Vallina]]></title>
  <link href="http://rfvallina.com/blog/categories/node-dot-js/atom.xml" rel="self"/>
  <link href="http://rfvallina.com/"/>
  <updated>2016-06-05T16:37:36+02:00</updated>
  <id>http://rfvallina.com/</id>
  <author>
    <name><![CDATA[Raúl Fuente Vallina]]></name>
    <email><![CDATA[raul@rfvallina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Monitor Disk Space Usage in AWS Using Node.js]]></title>
    <link href="http://rfvallina.com/blog/2016/02/27/monitor-disk-space-usage-using-node-dot-js/"/>
    <updated>2016-02-27T17:21:09+01:00</updated>
    <id>http://rfvallina.com/blog/2016/02/27/monitor-disk-space-usage-using-node-dot-js</id>
    <content type="html"><![CDATA[<p>Sometimes, if you are a server administrator or you simply are an application owner but you have full rights on the server, you could be interested in being informed when the disk space is reaching the maximum capacity.</p>

<!-- more -->


<p>In my case I had to deal with this while setting up different AWS environments. In AWS there&rsquo;s no built-in alarm to monitor disk usage. Depending on the case, AWS could provide scripts to create custom metrics. Such is the case with <strong>disk usage</strong> metrics. AWS provides a <a href="http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/mon-scripts.html">set of scripts</a> to report memory, swap, and disk space utilization metrics for a Linux instance.</p>

<h3>Drawback</h3>

<ul>
<li>You have to install these scripts manually</li>
<li>AWS charges you for having custom metrics</li>
</ul>


<h3>Solution</h3>

<p>A cheaper solution is to develop your own tool to report disk usage. I created a simple Node script which sends an email notification in case the available disk percentage falls below a certain threshold.</p>

<pre><code class="js">'use strict'

var disk = require('diskusage'),
    nodemailer = require('nodemailer'),
    sendmailTransport = require('nodemailer-sendmail-transport');

var THRESHOLD = 30;

disk.check('/', function(err, info) {
    var availablePercentage = ((info.available / info.total) * 100).toFixed(2);
    if(availablePercentage &lt;= THRESHOLD){
        //Setup email data
        var transporter = nodemailer.createTransport(sendmailTransport({
            path: '/usr/sbin/sendmail'
        }));
        var mailOptions = {
            from: 'EC2 Admin &lt;admin-ec2@no-reply.com&gt;', // sender address
            to: 'address1@domain.com, address2@domain.com', // list of receivers
            subject: 'Disk Usage Warning!!!', // Subject line
            text: 'Only ' + availablePercentage + '% of disk space is available' // plaintext body
        };
        //Send email
        transporter.sendMail(mailOptions, function(error, info){
            if(error){
                return console.log(error);
            }
            console.log('Message sent: ' + info.response);
        });
    }
});
</code></pre>

<p>As you see, the script requires to use three third-party node modules. <strong>diskusage</strong> is responsible to check the disk space, while <strong>nodemailer</strong> and <strong>nodemailer-sendmail-transport</strong> are responsible for sending the email notification. It assumes that sendmail is installed in the system to ensure the message reaches its destination.</p>

<p>Below is the <strong>package.json</strong> used to setup the script. You have to type <strong>npm install</strong> to have all the necessary modules installed.
And type <strong>node app.js</strong> to run the script.</p>

<pre><code class="json">{
  "name"        : "disk-usage-alarm",
  "version"     : "0.0.1",
  "private"     : "true",
  "description" : "",
  "author"      : "rfvallina",
  "homepage"    : "http://rfvallina.com",
  "dependencies": {
    "diskusage": "^0.1.4",
    "nodemailer": "^2.0.0",
    "nodemailer-sendmail-transport": "1.0.0"
  }
}
</code></pre>

<h3>Cron setup</h3>

<p>If you want the script to run on a regular basis, let cron daemon do it. Below are the steps to add it to crontab.</p>

<ul>
<li>Edit crontab</li>
</ul>


<pre><code class="sh">crontab -e
</code></pre>

<ul>
<li>Add entry to crontab. Place the below text in crontab.</li>
</ul>


<p>0 * * * * node /path/to/script/app.js</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Verify Shopify Webhooks Using Node.js]]></title>
    <link href="http://rfvallina.com/blog/2015/11/22/verify-shopify-webhooks-using-node-dot-js/"/>
    <updated>2015-11-22T20:17:17+01:00</updated>
    <id>http://rfvallina.com/blog/2015/11/22/verify-shopify-webhooks-using-node-dot-js</id>
    <content type="html"><![CDATA[<p>As you might know if you have experience with the <a href="https://docs.shopify.com/api">Shopify API</a>, Shopify provides <strong>Webhooks</strong>, which is a tool for retrieving and storing data from a certain event. They even allow managing Webhooks through the API. For instance, if you want your application to be notified when a new order is placed in your store, you may register a Webhook for the <em>create/order</em> event.</p>

<!-- more -->


<p>But you might be wondering how to ensure that the incoming request actually comes from Shopify. The answer is yes, there&rsquo;s a way to guarantee that. Specially for security reasons, it&rsquo;s almost a must to verify webhooks. At the time of writing this there&rsquo;s no official documentation for <a href="https://docs.shopify.com/api/webhooks/using-webhooks#verify-webhook">verifying webhooks</a> in Node.js, so I&rsquo;m going to explain how to do it. It&rsquo;s pretty straightforward.</p>

<p>Webhooks can be verified by calculating a digital signature. Each Webhook request includes a <strong>X-Shopify-Hmac-SHA256</strong> header which is generated using the app&rsquo;s shared secret, along with the data sent in the request. To verify that the request came from Shopify, compute the HMAC digest according to the following algorithm and compare it to the value in the <strong>X-Shopify-Hmac-SHA256</strong> header. If they match, you can be sure that the Webhook was sent from Shopify and the data has not been compromised.</p>

<p>In this example I&rsquo;m going to use the <a href="http://expressjs.com/"><strong>Express</strong></a> framework with the <a href="https://www.npmjs.com/package/body-parser"><strong>body-parser</strong></a> middleware. Basically, what the code below is doing is verifying every incoming request. If the url path matches the one for my webhook event, then it calculates the signature. If the calculated signature matches the one that comes in the header it goes ahead processing the request. Otherwise it throws an error.</p>

<pre><code class="js">app.use(bodyParser.json({
    verify: function(req, res, buf, encoding) {
        if (req.url.search('shopify/webhook') &gt;= 0) {
            var calculated_signature = crypto.createHmac('sha256', 'SHOPIFY_SHARED_SECRET')
                .update(buf)
                .digest('base64');
            if (calculated_signature != req.headers['x-shopify-hmac-sha256']) {
                throw new Error('Invalid signature. Access denied');
            }
        }
    }
}));
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Share Private Node.js Modules Across Applications (Locally)]]></title>
    <link href="http://rfvallina.com/blog/2015/11/12/share-private-node-dot-js-modules-across-applications-locally/"/>
    <updated>2015-11-12T14:53:11+01:00</updated>
    <id>http://rfvallina.com/blog/2015/11/12/share-private-node-dot-js-modules-across-applications-locally</id>
    <content type="html"><![CDATA[<p>In this post I&rsquo;m going to talk about a quite useful topic around Node.js: <strong>Code Reuse</strong>. I didn&rsquo;t find a good article enumerating the different options you have and the benefits and disadvantages of each of them. I have to deal with this in most of my Node projects so describing this can be of great help.</p>

<!-- more -->


<p>Suppose you have a bunch of private libraries you want to share on one or several applications. Let&rsquo;s say you developed some common functionality that can be used in different applications. You have to be able to share them across your Node applications in a centralized way, but privately, because you don&rsquo;t want them to be publicly accessed. These are only for our personal use.</p>

<p>I&rsquo;m going to focus only in sharing libraries locally (not through a remote repository or whatever), which is good for development purposes. I might cover how to share libraries remotely in subsequent articles.</p>

<p>Below are the different options available.</p>

<ul>
<li>Local installation (npm install <folder>)</li>
<li>Local paths (npm install &ndash;save)</li>
<li>Link (npm link)</li>
<li>Create your own local registry</li>
</ul>


<h3>Local installation (npm install <folder>)</h3>

<p>You can achieve this by using <strong>npm install</strong> command. Let&rsquo;s put an example. Suppose you have this folder structure.</p>

<pre><code>common_lib
├──lib
|   ├──lib1.js
|   ├──lib2.js
├──package.json
├──index.js

app1
├──app.js
├──package.json
</code></pre>

<p>You want to use <strong>common_lib</strong> module with its submodules in <strong>app1</strong> application.</p>

<p><strong>lib1.js</strong></p>

<pre><code class="js">'use strict'

function Lib1(){
    console.log("Constructing Lib1...");
}

Lib1.prototype.helloLib = function(){
    console.log("Hello Lib1");
};

Lib1.prototype.goodbyeLib = function(){
    console.log("Goodbye Lib1");
};

module.exports = Lib1;
</code></pre>

<p><strong>lib2.js</strong>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">use</span> <span class="nx">strict</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">Lib2</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Constructing</span> <span class="nx">Lib2</span><span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Lib1</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">helloLib</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Hello</span> <span class="nx">Lib2</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Lib1</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">goodbyeLib</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Goodbye</span> <span class="nx">Lib2</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Lib1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>index.js</strong></p>

<pre><code class="js">'use strict'

var lib1 = require('./lib/lib1.js');
var lib2 = require('./lib/lib2.js');

module.exports.lib1 = lib1;
module.exports.lib2 = lib2;
</code></pre>

<p>In <strong>package.json</strong> from common_lib module you&rsquo;ll need to indicate that the module is private (to avoid accidental publishing to npm) and the main file for your module.</p>

<pre><code class="json">...
"name"    : "common-lib",
"private" : "true",
"main"    : "index.js",
...
</code></pre>

<p>Then, you have to install the common lib module under your app1 application.</p>

<pre><code class="sh">$ cd /projects/app1
$ npm install ../common_lib
</code></pre>

<p>The above commands created <strong>node_modules</strong> folder and installed common_lib module in it. Now, it&rsquo;s time to make use of the common libraries in my application. How would you do that?</p>

<p><strong>app1.js</strong></p>

<pre><code class="js">'use strict'

var common_lib = require('common-lib');
var lib1 = new common_lib.lib1();
var lib2 = new common_lib.lib2();

lib1.helloLib();
lib2.helloLib();
</code></pre>

<p>This is the result of running app1.</p>

<pre><code class="sh">$ node app1/app.js
Constructing Lib1...
Constructing Lib2...
Hello Lib1
Hello Lib2
</code></pre>

<h3>Local paths (npm install &ndash;save)</h3>

<p>There&rsquo;s another way of installing a module locally without pointing to any remote path. As of version 2.0.0 of Node.js you can install a local module directly using npm install &ndash;save. <a href="https://docs.npmjs.com/files/package.json#local-paths">This link</a> explains well how to achieve it.</p>

<p>To make it accessible from app1, we would do something like this:</p>

<pre><code class="sh">$ cd app1
$ npm install --save ../common-lib/
</code></pre>

<p>The above command normalized our app1/package.json and also created <strong>node_modules/common-lib</strong> folder. It <strong>automatically</strong> added the dependency to the package.json file.</p>

<pre><code class="json">"dependencies": {
    "common-lib": "0.0.1"
}
</code></pre>

<p>Now it&rsquo;s possible to run app1 successfully as indicated in the previous example.</p>

<h3>Link (npm link)</h3>

<p>The previous options are good but every time you make changes in common_lib module you have to reinstall the module in all applications which use it. If common_lib is not yet stable or you keep on adding new features to it, it can be a hassle to rebuild each time.</p>

<p>There&rsquo;s a better choice to deal with this: <a href="https://docs.npmjs.com/cli/link"><strong>npm link</strong></a>. This is only recommended for <strong>development environments</strong>.</p>

<p>Suppose we have the same project structure as in the previous example. This is how you would achieve sharing common-lib in other projects.</p>

<pre><code class="sh">$ cd app1
$ npm link ../common_lib
</code></pre>

<p>Now we have a <strong>node_modules</strong> folder under app1 and a link to common_lib folder inside. Every time we make a change on our common_lib the changes will be automatically reflected in our app1 application, so this option is the one I like most for development.</p>

<h3>Create your own local registry</h3>

<p>Even though this option is recommendable for production environments I&rsquo;m going to include it in this chapter because it could be also good in development. Creating a node repository locally is perfectly valid but this option is the most time-consuming. This involves replicating CouchDB database, implement the API&rsquo;s,&hellip;</p>

<p>I&rsquo;ve never tried it, but if you&rsquo;re a Java programmer or you have some Java knowledge, the concept would be similar to installing a Maven repository such as Nexus.</p>

<p>This option would be recommendable when you have several modules you need to share across your organization, so installing a central private npm would be a good choice.</p>

<p><a href="https://docs.npmjs.com/misc/registry">Here, it&rsquo;s the official documentation</a>.</p>
]]></content>
  </entry>
  
</feed>
