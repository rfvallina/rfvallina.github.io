<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Jenkins | Raúl Fuente Vallina]]></title>
  <link href="http://rfvallina.com/blog/categories/jenkins/atom.xml" rel="self"/>
  <link href="http://rfvallina.com/"/>
  <updated>2015-06-19T00:39:49+02:00</updated>
  <id>http://rfvallina.com/</id>
  <author>
    <name><![CDATA[Raúl Fuente Vallina]]></name>
    <email><![CDATA[raul@rfvallina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deployment Management on Multiple AWS Instances With Capistrano 3]]></title>
    <link href="http://rfvallina.com/blog/2015/02/01/deployment-management-on-multiple-aws-instances-with-capistrano-3/"/>
    <updated>2015-02-01T16:02:16+01:00</updated>
    <id>http://rfvallina.com/blog/2015/02/01/deployment-management-on-multiple-aws-instances-with-capistrano-3</id>
    <content type="html"><![CDATA[<p>When your application has to run on multiple servers or you simply has multiple applications running on different servers it&rsquo;s always a good idea to automate this process so you don&rsquo;t have to manually deploy the application on each server every time a new fix, release or whatever is applied.</p>

<!-- more -->


<p>In my case, in the search of optimal results I have the same version of the application running on 3 different <strong>AWS EC2</strong> instances on different locations (Virginia, Oregon and California). You will understand what a nightmare this is when a new version of the application has to be deployed if you do this task manually.</p>

<p>So I considered doing a little research on how to improve this process by running one or a few commands to make all happen automatically. And this is what I found.</p>

<ul>
<li><strong>AWS OpsWorks</strong>: I never used it, but as far as I know it&rsquo;s highly customizable and useful for scaling up applications. Everything you can do with a script can be done with OpsWorks and there&rsquo;s no additional charge for using it. The drawback is what if you have an instance of the application running outside AWS environment. Then this is not your choice.</li>
<li><strong><a href="http://puppetlabs.com/">Puppet</a></strong>: I didn&rsquo;t test it but I saw it consists on a web tool and you can have your deployment configuration up and running very quickly and effortlessly. The drawback is that it&rsquo;s too expensive for a small business. Here is the <a href="http://puppetlabs.com/puppet/how-to-buy">pricing</a>.</li>
<li><strong>Jenkins</strong>: This is a powerful deployment management tool. I used it on Java projects mainly for <strong>CI</strong>. I always used it by installing it on the target server and with the aim of managing the deployments on that server only. It&rsquo;s open source.</li>
<li><strong><a href="http://capistranorb.com/">Capistrano</a></strong>: This is a Ruby tool whose purpose is to automate tasks on remote servers. Although it&rsquo;s perfect for our purpose, it can be good for other tasks like automate audits of any number of machines, script arbitrary workflows over SSH, automate common tasks in software teams,&hellip; It&rsquo;s fully customizable and it&rsquo;s open-source. So I decided to go with it to manage my deployments.</li>
</ul>


<h2>Installation</h2>

<p>First of all think about where your deployment management environment will be hosted. Personally I prefer to have the minimun possible configurations locally, so I decided to host it on my own virtual server (Linux CentOS 7). Below are the steps to install Capistrano 3 on Linux CentOS 7.</p>

<ul>
<li><p>Install Ruby (1.9+) if you haven&rsquo;t
<code>sh
sudo yum install ruby
</code></p></li>
<li><p>Install Capistrano
<code>sh
gem install capistrano
</code></p></li>
<li><p>Create project folder
<code>sh
mkdir -p deployment/my-project
cd deployment/my-project
</code></p></li>
<li><p>Install capfile
<code>sh
cap install
</code></p></li>
</ul>


<p>This creates the following files:
<code>
├── Capfile
├── config
│   ├── deploy
│   │   ├── production.rb
│   │   └── staging.rb
│   └── deploy.rb
└── lib
    └── capistrano
            └── tasks
</code></p>

<h2>Usage</h2>

<ul>
<li>Set global variables on <strong>deploy.rb</strong></li>
</ul>


<pre><code class="ruby">set :application, 'my-app-name'
# set :repo_url, 'git@example.com:me/my_repo.git'
set :repo_url, 'https://your-github-token@github.com/your-github-username/your-repo.git'

# Default branch is :master
set :branch, 'my-branch'
</code></pre>

<p><strong>Note 1</strong>: I use token authentication method for Github. You can enable this on your github settings.
<strong>Note 2</strong>: If you don&rsquo;t set <strong>:deploy_to</strong> variable, the project is downloaded from github into <strong>/var/www/my_app_name</strong> with a specific structure:</p>

<pre><code>├── current -&gt; /var/www/my_app_name/releases/20150120114500/
├── releases
│   ├── 20150080072500
│   ├── 20150090083000
│   ├── 20150100093500
│   ├── 20150110104000
│   └── 20150120114500
├── repo
│   └── &lt;VCS related data&gt;
├── revisions.log
└── shared
    └── &lt;linked_files and linked_dirs&gt;
</code></pre>

<ul>
<li>Customize deployment tasks</li>
</ul>


<p>There are several hook tasks e.g. <strong>:started</strong>, <strong>:updated</strong> for you to hook up custom tasks into the flow using <strong>after()</strong> and <strong>before()</strong>. In my case I created my own tasks to copy specific files from the repository download folder to the application deployment folder.</p>

<pre><code class="ruby">namespace :deploy do

    after :finished, :copy_files do
        target_dir = "/var/www/html/deploy"
        target_dir_includes = target_dir + "/includes"
        on roles(:virginia, :oregon, :california) do
            print "copying #{current_path} -&gt; #{target_dir}\n"
            execute "cp -rf #{current_path}/* #{target_dir}"
        end
        on roles(:virginia) do
            print "copying #{target_dir_includes}/db_config_virginia.php -&gt; #{target_dir_includes}/db_config_data.php\n"
            execute "cp -f #{target_dir_includes}/db_config_virginia.php #{target_dir_includes}/db_config_data.php"
        end
        on roles(:oregon) do
            print "copying #{target_dir_includes}/db_config_oregon.php -&gt; #{target_dir_includes}/db_config_data.php\n"
            execute "cp -f #{target_dir_includes}/db_config_oregon.php #{target_dir_includes}/db_config_data.php"
        end
        on roles(:california) do
            print "copying #{target_dir_includes}/db_config_california.php -&gt; #{target_dir_includes}/db_config_data.php\n"
            execute "cp -f #{target_dir_includes}/db_config_california.php #{target_dir_includes}/db_config_data.php"
        end
    end
</code></pre>

<p>Note that I have three roles (virginia, oregon and california) which correspond to the locations where the application is deployed. I make use of the roles concept to have different host and tasks per each.</p>

<p>Below is my <strong>production.rb</strong> file.</p>

<pre><code class="ruby">role :virginia, %w{ec2-user@my-virginia-instance-domain.com}
role :oregon, %w{ec2-user@my-oregon-instance-domain.com}
role :california, %w{ec2-user@my-california-instance-domain.com}

server 'my-virginia-instance-domain.com',
user: 'ec2-user',
roles: %w{virginia},
ssh_options: {
     user: 'ec2-user', # overrides user setting above
     keys: %w(/path/to/virginia-file.pem),
     auth_methods: %w(publickey)
   }

server 'my-oregon-instance-domain.com',
user: 'ec2-user',
roles: %w{oregon},
ssh_options: {
     user: 'ec2-user', # overrides user setting above
     keys: %w(/path/to/oregon-file.pem),
     auth_methods: %w(publickey)
   }

server 'ec2-user@my-california-instance-domain.com',
user: 'ec2-user',
roles: %w{california},
ssh_options: {
     user: 'ec2-user', # overrides user setting above
     keys: %w(/path/to/california-file.pem),
     auth_methods: %w(publickey)
   }
</code></pre>

<p>Note that I&rsquo;m using &lsquo;publickey&rsquo; authentication method, so you need to tell capistrano the path to your private key (.pem file). For authentication you have to generate a public key and copy it to the remote servers. For more information about authentication on the remote servers, have a look at <a href="http://capistranorb.com/documentation/getting-started/authentication-and-authorisation/">capistrano reference guide</a>.</p>
]]></content>
  </entry>
  
</feed>
