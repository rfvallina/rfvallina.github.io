<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Aws | Raúl Fuente Vallina]]></title>
  <link href="http://rfvallina.com/blog/categories/aws/atom.xml" rel="self"/>
  <link href="http://rfvallina.com/"/>
  <updated>2015-06-19T00:35:54+02:00</updated>
  <id>http://rfvallina.com/</id>
  <author>
    <name><![CDATA[Raúl Fuente Vallina]]></name>
    <email><![CDATA[raul@rfvallina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deployment Management on Multiple AWS Instances With Capistrano 3]]></title>
    <link href="http://rfvallina.com/blog/2015/02/01/deployment-management-on-multiple-aws-instances-with-capistrano-3/"/>
    <updated>2015-02-01T16:02:16+01:00</updated>
    <id>http://rfvallina.com/blog/2015/02/01/deployment-management-on-multiple-aws-instances-with-capistrano-3</id>
    <content type="html"><![CDATA[<p>When your application has to run on multiple servers or you simply has multiple applications running on different servers it&rsquo;s always a good idea to automate this process so you don&rsquo;t have to manually deploy the application on each server every time a new fix, release or whatever is applied.</p>

<!-- more -->


<p>In my case, in the search of optimal results I have the same version of the application running on 3 different <strong>AWS EC2</strong> instances on different locations (Virginia, Oregon and California). You will understand what a nightmare this is when a new version of the application has to be deployed if you do this task manually.</p>

<p>So I considered doing a little research on how to improve this process by running one or a few commands to make all happen automatically. And this is what I found.</p>

<ul>
<li><strong>AWS OpsWorks</strong>: I never used it, but as far as I know it&rsquo;s highly customizable and useful for scaling up applications. Everything you can do with a script can be done with OpsWorks and there&rsquo;s no additional charge for using it. The drawback is what if you have an instance of the application running outside AWS environment. Then this is not your choice.</li>
<li><strong><a href="http://puppetlabs.com/">Puppet</a></strong>: I didn&rsquo;t test it but I saw it consists on a web tool and you can have your deployment configuration up and running very quickly and effortlessly. The drawback is that it&rsquo;s too expensive for a small business. Here is the <a href="http://puppetlabs.com/puppet/how-to-buy">pricing</a>.</li>
<li><strong>Jenkins</strong>: This is a powerful deployment management tool. I used it on Java projects mainly for <strong>CI</strong>. I always used it by installing it on the target server and with the aim of managing the deployments on that server only. It&rsquo;s open source.</li>
<li><strong><a href="http://capistranorb.com/">Capistrano</a></strong>: This is a Ruby tool whose purpose is to automate tasks on remote servers. Although it&rsquo;s perfect for our purpose, it can be good for other tasks like automate audits of any number of machines, script arbitrary workflows over SSH, automate common tasks in software teams,&hellip; It&rsquo;s fully customizable and it&rsquo;s open-source. So I decided to go with it to manage my deployments.</li>
</ul>


<h2>Installation</h2>

<p>First of all think about where your deployment management environment will be hosted. Personally I prefer to have the minimun possible configurations locally, so I decided to host it on my own virtual server (Linux CentOS 7). Below are the steps to install Capistrano 3 on Linux CentOS 7.</p>

<ul>
<li><p>Install Ruby (1.9+) if you haven&rsquo;t
<code>sh
sudo yum install ruby
</code></p></li>
<li><p>Install Capistrano
<code>sh
gem install capistrano
</code></p></li>
<li><p>Create project folder
<code>sh
mkdir -p deployment/my-project
cd deployment/my-project
</code></p></li>
<li><p>Install capfile
<code>sh
cap install
</code></p></li>
</ul>


<p>This creates the following files:
<code>
├── Capfile
├── config
│   ├── deploy
│   │   ├── production.rb
│   │   └── staging.rb
│   └── deploy.rb
└── lib
    └── capistrano
            └── tasks
</code></p>

<h2>Usage</h2>

<ul>
<li>Set global variables on <strong>deploy.rb</strong></li>
</ul>


<pre><code class="ruby">set :application, 'my-app-name'
# set :repo_url, 'git@example.com:me/my_repo.git'
set :repo_url, 'https://your-github-token@github.com/your-github-username/your-repo.git'

# Default branch is :master
set :branch, 'my-branch'
</code></pre>

<p><strong>Note 1</strong>: I use token authentication method for Github. You can enable this on your github settings.
<strong>Note 2</strong>: If you don&rsquo;t set <strong>:deploy_to</strong> variable, the project is downloaded from github into <strong>/var/www/my_app_name</strong> with a specific structure:</p>

<pre><code>├── current -&gt; /var/www/my_app_name/releases/20150120114500/
├── releases
│   ├── 20150080072500
│   ├── 20150090083000
│   ├── 20150100093500
│   ├── 20150110104000
│   └── 20150120114500
├── repo
│   └── &lt;VCS related data&gt;
├── revisions.log
└── shared
    └── &lt;linked_files and linked_dirs&gt;
</code></pre>

<ul>
<li>Customize deployment tasks</li>
</ul>


<p>There are several hook tasks e.g. <strong>:started</strong>, <strong>:updated</strong> for you to hook up custom tasks into the flow using <strong>after()</strong> and <strong>before()</strong>. In my case I created my own tasks to copy specific files from the repository download folder to the application deployment folder.</p>

<pre><code class="ruby">namespace :deploy do

    after :finished, :copy_files do
        target_dir = "/var/www/html/deploy"
        target_dir_includes = target_dir + "/includes"
        on roles(:virginia, :oregon, :california) do
            print "copying #{current_path} -&gt; #{target_dir}\n"
            execute "cp -rf #{current_path}/* #{target_dir}"
        end
        on roles(:virginia) do
            print "copying #{target_dir_includes}/db_config_virginia.php -&gt; #{target_dir_includes}/db_config_data.php\n"
            execute "cp -f #{target_dir_includes}/db_config_virginia.php #{target_dir_includes}/db_config_data.php"
        end
        on roles(:oregon) do
            print "copying #{target_dir_includes}/db_config_oregon.php -&gt; #{target_dir_includes}/db_config_data.php\n"
            execute "cp -f #{target_dir_includes}/db_config_oregon.php #{target_dir_includes}/db_config_data.php"
        end
        on roles(:california) do
            print "copying #{target_dir_includes}/db_config_california.php -&gt; #{target_dir_includes}/db_config_data.php\n"
            execute "cp -f #{target_dir_includes}/db_config_california.php #{target_dir_includes}/db_config_data.php"
        end
    end
</code></pre>

<p>Note that I have three roles (virginia, oregon and california) which correspond to the locations where the application is deployed. I make use of the roles concept to have different host and tasks per each.</p>

<p>Below is my <strong>production.rb</strong> file.</p>

<pre><code class="ruby">role :virginia, %w{ec2-user@my-virginia-instance-domain.com}
role :oregon, %w{ec2-user@my-oregon-instance-domain.com}
role :california, %w{ec2-user@my-california-instance-domain.com}

server 'my-virginia-instance-domain.com',
user: 'ec2-user',
roles: %w{virginia},
ssh_options: {
     user: 'ec2-user', # overrides user setting above
     keys: %w(/path/to/virginia-file.pem),
     auth_methods: %w(publickey)
   }

server 'my-oregon-instance-domain.com',
user: 'ec2-user',
roles: %w{oregon},
ssh_options: {
     user: 'ec2-user', # overrides user setting above
     keys: %w(/path/to/oregon-file.pem),
     auth_methods: %w(publickey)
   }

server 'ec2-user@my-california-instance-domain.com',
user: 'ec2-user',
roles: %w{california},
ssh_options: {
     user: 'ec2-user', # overrides user setting above
     keys: %w(/path/to/california-file.pem),
     auth_methods: %w(publickey)
   }
</code></pre>

<p>Note that I&rsquo;m using &lsquo;publickey&rsquo; authentication method, so you need to tell capistrano the path to your private key (.pem file). For authentication you have to generate a public key and copy it to the remote servers. For more information about authentication on the remote servers, have a look at <a href="http://capistranorb.com/documentation/getting-started/authentication-and-authorisation/">capistrano reference guide</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Install Apache, PHP 5.5 and Memcached on AWS EC2]]></title>
    <link href="http://rfvallina.com/blog/2015/01/04/how-to-install-apache/"/>
    <updated>2015-01-04T00:00:00+01:00</updated>
    <id>http://rfvallina.com/blog/2015/01/04/how-to-install-apache</id>
    <content type="html"><![CDATA[<p>AWS EC2 looks like a good choice when you need a clean instance ready for you to manage your own server as per your needs.
Recently, I launched an EC2 instance from a Linux AMI (<strong>Amazon Linux AMI 2014.09.1</strong>) to create my own web server with <strong>Apache</strong> and support for <strong>PHP 5.5</strong>. I know Amazon has the <a href="http://aws.amazon.com/elasticbeanstalk/?nc2=h_ls">EB (Elastic Beanstalk)</a> service which comes with the necessary stuff already installed to run your Java, Node, PHP,&hellip; applications so that you only need to upload your code to the server and EB will do the rest.</p>

<!-- more -->


<p>I have experience dealing with AWS EB in the past and the reason this time I chose EC2 instead of EB is that with EC2 you have total freedom to set up your server. For instance, I found difficulties setting up cron jobs on EB in the past, but with EC2 this is a simple administration task when you connect to the server through ssh.</p>

<p><strong>What were the reasons that led me to choose AWS instead of a different hosting provider?</strong></p>

<p>This is a typical question when you are looking for the best and cheapest hosting provider for your applications. My reasons here were two: scalability and location.</p>

<ul>
<li><strong>Scalability</strong>: With AWS is easy to scale up your applications in a timely manner and with very low effort.</li>
<li><strong>Location</strong>: With AWS you can choose where to run your applications among different locations available all over the world or even replicate your application in different locations at the same time. The latter is what I wanted.</li>
</ul>


<p>Below are the steps to configure your EC2 instance based on a Linux AMI to run <strong>Apache Web Server</strong>, <strong>PHP 5.5</strong>, <strong>Memcached server</strong> and <strong>memcache extension</strong>. The sources I gathered information from were basically the <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/install-LAMP.html">AWS guid to install a LAMP server</a> and other forums around.</p>

<ul>
<li>Connect to your instance using ssh. Make sure you have previously downloaded and securely stored your private key and the ssh service enabled in your security group</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh -i <span class="p">&amp;</span>ldquo<span class="p">;</span>/path/to/private_key.pem<span class="p">&amp;</span>rdquo<span class="p">;</span> ec2-user@your-public-dns-name
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>Update instance packages</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo yum update -y
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>Install <strong>Apache 2.4</strong>, <strong>PHP 5.5</strong> and <strong>PDO</strong> support for MySQL</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo yum install php55 php55-pdo php55-mysqlnd
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>Start Apache and add httpd service to automatically start after a system boot.</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo service httpd start
</span><span class='line'>sudo chkconfig httpd on
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>Connect to your Apache server. Make sure you have previously added <strong>port 80</strong> to your security group in the EC2 Console. Open a browser and type the following.</li>
</ul>


<p><a href="http://your-public-dns-name.com/">http://your-public-dns-name.com/</a></p>

<p>You will see the web server welcome page.</p>

<ul>
<li>Create www group, add ec2-user to the group and exit the terminal for the changes to take effect</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo groupadd www
</span><span class='line'>sudo usermod -a -G www ec2-user
</span><span class='line'><span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>Give www ownership and add permission to the document root (/var/www)</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo chown -R root:www /var/www
</span><span class='line'>sudo chmod <span class="m">2775</span> /var/www
</span><span class='line'>find /var/www -type d -exec sudo chmod <span class="m">2775</span> <span class="o">{}</span> +
</span><span class='line'>find /var/www -type f -exec sudo chmod <span class="m">0664</span> <span class="o">{}</span> +
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>Test PHP with the <strong>phpinfo</strong> page</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">echo</span> <span class="p">&amp;</span>ldquo<span class="p">;&amp;</span>lt<span class="p">;</span>?php phpinfo<span class="o">()</span><span class="p">;</span> ?&gt;<span class="p">&amp;</span>rdquo<span class="p">;</span> &gt; /var/www/html/phpinfo.php
</span></code></pre></td></tr></table></div></figure></p>

<p>See the page by typing the url in a browser:</p>

<p><a href="http://your-public-dns-name.com/phpinfo.php">http://your-public-dns-name.com/phpinfo.php</a></p>

<ul>
<li>MySQL</li>
</ul>


<p>I didn&rsquo;t install MySQL on the EC2 instance itself, but I used the <a href="http://aws.amazon.com/rds/?nc2=h_ls">AWS RDS service</a>, so that all instances of my application can share only one database instance.</p>

<ul>
<li>Install <strong>memcached server</strong> and add it to the system boot. By default it will be listening on localhost and port 11211</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo yum install memcached
</span><span class='line'>sudo service memcached start
</span><span class='line'>sudo chkconfig <span class="p">&amp;</span>ndash<span class="p">;</span>level <span class="m">345</span> memcached on
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>Install <strong>memcache extension</strong></li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo yum install php55-pecl-memcache
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
