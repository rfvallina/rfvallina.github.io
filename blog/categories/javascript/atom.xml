<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Raúl Fuente Vallina]]></title>
  <link href="http://rfvallina.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://rfvallina.com/"/>
  <updated>2016-06-05T16:37:36+02:00</updated>
  <id>http://rfvallina.com/</id>
  <author>
    <name><![CDATA[Raúl Fuente Vallina]]></name>
    <email><![CDATA[raul@rfvallina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Share Private Node.js Modules Across Applications (Locally)]]></title>
    <link href="http://rfvallina.com/blog/2015/11/12/share-private-node-dot-js-modules-across-applications-locally/"/>
    <updated>2015-11-12T14:53:11+01:00</updated>
    <id>http://rfvallina.com/blog/2015/11/12/share-private-node-dot-js-modules-across-applications-locally</id>
    <content type="html"><![CDATA[<p>In this post I&rsquo;m going to talk about a quite useful topic around Node.js: <strong>Code Reuse</strong>. I didn&rsquo;t find a good article enumerating the different options you have and the benefits and disadvantages of each of them. I have to deal with this in most of my Node projects so describing this can be of great help.</p>

<!-- more -->


<p>Suppose you have a bunch of private libraries you want to share on one or several applications. Let&rsquo;s say you developed some common functionality that can be used in different applications. You have to be able to share them across your Node applications in a centralized way, but privately, because you don&rsquo;t want them to be publicly accessed. These are only for our personal use.</p>

<p>I&rsquo;m going to focus only in sharing libraries locally (not through a remote repository or whatever), which is good for development purposes. I might cover how to share libraries remotely in subsequent articles.</p>

<p>Below are the different options available.</p>

<ul>
<li>Local installation (npm install <folder>)</li>
<li>Local paths (npm install &ndash;save)</li>
<li>Link (npm link)</li>
<li>Create your own local registry</li>
</ul>


<h3>Local installation (npm install <folder>)</h3>

<p>You can achieve this by using <strong>npm install</strong> command. Let&rsquo;s put an example. Suppose you have this folder structure.</p>

<pre><code>common_lib
├──lib
|   ├──lib1.js
|   ├──lib2.js
├──package.json
├──index.js

app1
├──app.js
├──package.json
</code></pre>

<p>You want to use <strong>common_lib</strong> module with its submodules in <strong>app1</strong> application.</p>

<p><strong>lib1.js</strong></p>

<pre><code class="js">'use strict'

function Lib1(){
    console.log("Constructing Lib1...");
}

Lib1.prototype.helloLib = function(){
    console.log("Hello Lib1");
};

Lib1.prototype.goodbyeLib = function(){
    console.log("Goodbye Lib1");
};

module.exports = Lib1;
</code></pre>

<p><strong>lib2.js</strong>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">use</span> <span class="nx">strict</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">Lib2</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Constructing</span> <span class="nx">Lib2</span><span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Lib1</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">helloLib</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Hello</span> <span class="nx">Lib2</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Lib1</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">goodbyeLib</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Goodbye</span> <span class="nx">Lib2</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Lib1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>index.js</strong></p>

<pre><code class="js">'use strict'

var lib1 = require('./lib/lib1.js');
var lib2 = require('./lib/lib2.js');

module.exports.lib1 = lib1;
module.exports.lib2 = lib2;
</code></pre>

<p>In <strong>package.json</strong> from common_lib module you&rsquo;ll need to indicate that the module is private (to avoid accidental publishing to npm) and the main file for your module.</p>

<pre><code class="json">...
"name"    : "common-lib",
"private" : "true",
"main"    : "index.js",
...
</code></pre>

<p>Then, you have to install the common lib module under your app1 application.</p>

<pre><code class="sh">$ cd /projects/app1
$ npm install ../common_lib
</code></pre>

<p>The above commands created <strong>node_modules</strong> folder and installed common_lib module in it. Now, it&rsquo;s time to make use of the common libraries in my application. How would you do that?</p>

<p><strong>app1.js</strong></p>

<pre><code class="js">'use strict'

var common_lib = require('common-lib');
var lib1 = new common_lib.lib1();
var lib2 = new common_lib.lib2();

lib1.helloLib();
lib2.helloLib();
</code></pre>

<p>This is the result of running app1.</p>

<pre><code class="sh">$ node app1/app.js
Constructing Lib1...
Constructing Lib2...
Hello Lib1
Hello Lib2
</code></pre>

<h3>Local paths (npm install &ndash;save)</h3>

<p>There&rsquo;s another way of installing a module locally without pointing to any remote path. As of version 2.0.0 of Node.js you can install a local module directly using npm install &ndash;save. <a href="https://docs.npmjs.com/files/package.json#local-paths">This link</a> explains well how to achieve it.</p>

<p>To make it accessible from app1, we would do something like this:</p>

<pre><code class="sh">$ cd app1
$ npm install --save ../common-lib/
</code></pre>

<p>The above command normalized our app1/package.json and also created <strong>node_modules/common-lib</strong> folder. It <strong>automatically</strong> added the dependency to the package.json file.</p>

<pre><code class="json">"dependencies": {
    "common-lib": "0.0.1"
}
</code></pre>

<p>Now it&rsquo;s possible to run app1 successfully as indicated in the previous example.</p>

<h3>Link (npm link)</h3>

<p>The previous options are good but every time you make changes in common_lib module you have to reinstall the module in all applications which use it. If common_lib is not yet stable or you keep on adding new features to it, it can be a hassle to rebuild each time.</p>

<p>There&rsquo;s a better choice to deal with this: <a href="https://docs.npmjs.com/cli/link"><strong>npm link</strong></a>. This is only recommended for <strong>development environments</strong>.</p>

<p>Suppose we have the same project structure as in the previous example. This is how you would achieve sharing common-lib in other projects.</p>

<pre><code class="sh">$ cd app1
$ npm link ../common_lib
</code></pre>

<p>Now we have a <strong>node_modules</strong> folder under app1 and a link to common_lib folder inside. Every time we make a change on our common_lib the changes will be automatically reflected in our app1 application, so this option is the one I like most for development.</p>

<h3>Create your own local registry</h3>

<p>Even though this option is recommendable for production environments I&rsquo;m going to include it in this chapter because it could be also good in development. Creating a node repository locally is perfectly valid but this option is the most time-consuming. This involves replicating CouchDB database, implement the API&rsquo;s,&hellip;</p>

<p>I&rsquo;ve never tried it, but if you&rsquo;re a Java programmer or you have some Java knowledge, the concept would be similar to installing a Maven repository such as Nexus.</p>

<p>This option would be recommendable when you have several modules you need to share across your organization, so installing a central private npm would be a good choice.</p>

<p><a href="https://docs.npmjs.com/misc/registry">Here, it&rsquo;s the official documentation</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preview TIFF and PDF Files Using HTML5 File API]]></title>
    <link href="http://rfvallina.com/blog/2015/08/22/preview-tiff-and-pdf-files-using-html5-file-api/"/>
    <updated>2015-08-22T20:29:32+02:00</updated>
    <id>http://rfvallina.com/blog/2015/08/22/preview-tiff-and-pdf-files-using-html5-file-api</id>
    <content type="html"><![CDATA[<p>Sometimes you need to read files which are in the user&rsquo;s local machine. Here is where HTML <a href="http://www.w3.org/TR/FileAPI/"><strong>File API</strong></a> comes into play. The use case I&rsquo;m going to explain is when you want to make a preview of an image which has not been uploaded anywhere yet, so you don&rsquo;t have the url of the image.</p>

<!-- more -->


<p>Also, if the file is TIFF or PDF the thing complicates. But the good news is that the preview is also possible. All the examples below make use of jQuery library. If you are interested how, continue reading.</p>

<h3>Preview web standard images</h3>

<p>Below is the usual way of reading files using File API to make a preview of a standard <strong>JPG</strong> or <strong>PNG</strong> image.</p>

<p>&#8220;` html</p>

<h2>Image Preview</h2>


<p><label>Select a file (jpg, jpeg, png)</label><br/></p>

<div><input type="file"/></div>


<pre><code></code></pre>

<p>$(document).ready(function () {
    var fileTypes = [&lsquo;jpg&rsquo;, &lsquo;jpeg&rsquo;, &lsquo;png&rsquo;];  //acceptable file types
    $(&ldquo;input:file&rdquo;).change(function (evt) {
        var parentEl = $(this).parent();
        var tgt = evt.target || window.event.srcElement,
                        files = tgt.files;</p>

<pre><code>    // FileReader support
    if (FileReader &amp;&amp; files &amp;&amp; files.length) {
        var fr = new FileReader();
        var extension = files[0].name.split('.').pop().toLowerCase(); 
        fr.onload = function (e) {
            success = fileTypes.indexOf(extension) &gt; -1;
            if(success)
                $(parentEl).append('&lt;img src="' + fr.result + '" class="preview"/&gt;');
        }
        fr.onloadend = function(e){
            console.debug("Load End");
        }
        fr.readAsDataURL(files[0]);
    }   
});
</code></pre>

<p>});
&#8220;`</p>

<p>Note that first thing is to get the reference of the file/s on the change event. After that, we have to create an instance of <strong>FileReader</strong> to be able to read the file properly. Once we make sure that our browser supports FileReader and we have a reference to the file, then we read the file.</p>

<p>The outstanding aspect here is how we are reading the file with FileReader. Some methods are provided to read files. In this particular case we use <strong><em>FileReader.readAsDataURL(Blob|File)</em></strong> because the result property will contain the file/blob&rsquo;s data encoded as a data URL and that&rsquo;s what we are looking for in the <code>&lt;img&gt;</code> tag.</p>

<h3>Preview TIFF images</h3>

<p>Displaying a tiff image on the web has been always a nightmare. And still there&rsquo;s no standard way of achieving it. For our example we&rsquo;ll use  <a href="https://github.com/seikichi/tiff.js/tree/master"><strong>seikichi&rsquo;s tiff.js library</strong></a>.</p>

<p>Remember to add tiff js library.</p>

<p><code>&lt;script src="https://cdn.rawgit.com/seikichi/tiff.js/master/tiff.min.js"&gt;&lt;/script&gt;</code></p>

<p>Now, our fileTypes array will have support for tiff files only.</p>

<pre><code class="js">var fileTypes = ['tiff', 'tif'];
</code></pre>

<p>And, here is how we read and render tiff files.</p>

<pre><code class="js">if (FileReader &amp;&amp; files &amp;&amp; files.length) {
      var fr = new FileReader();
      var extension = files[0].name.split('.').pop().toLowerCase();
      fr.onload = function(e) {
        success = fileTypes.indexOf(extension) &gt; -1;
        if (success) {
          //Using tiff.min.js library - https://github.com/seikichi/tiff.js/tree/master
          console.debug("Parsing TIFF image...");
          //initialize with 100MB for large files
          Tiff.initialize({
            TOTAL_MEMORY: 100000000
          });
          var tiff = new Tiff({
            buffer: e.target.result
          });
          var tiffCanvas = tiff.toCanvas();
          $(tiffCanvas).css({
            "max-width": "100px",
            "width": "100%",
            "height": "auto",
            "display": "block",
            "padding-top": "10px"
          }).addClass("preview");
          $(parentEl).append(tiffCanvas);
        }

      }
      fr.onloadend = function(e) {
        console.debug("Load End");
      }
      fr.readAsArrayBuffer(files[0]);
 }
</code></pre>

<p>The main difference here is now we are reading the file using <strong><em>FileReader.readAsArrayBuffer(Blob|File)</em></strong> and the image will be rendered on a HTML5 Canvas element.</p>

<h3>Preview PDF files</h3>

<p>Obviously, PDF files are not web compliant, so we have to make use of external libraries which help us deal with these type of files. A very well-known is the <a href="https://mozilla.github.io/pdf.js/"><strong>Mozilla PDF JS library</strong></a>. In our example we are going do a preview of the first page of the pdf file.</p>

<p>First, remember to include pdf js library in your html. You have to follow the steps described in the documentation to build the pdf.js project and generate the necessary pdf.js and pdf.worker.js files.</p>

<p>Now, our fileTypes array will have support for pdf files.</p>

<pre><code class="js">var fileTypes = ['pdf'];
</code></pre>

<p>Below is how we read the first page of a pdf file and render it on a HTML5 Canvas element.</p>

<pre><code class="js">if (FileReader &amp;&amp; files &amp;&amp; files.length) {
      var fr = new FileReader();
      var extension = files[0].name.split('.').pop().toLowerCase();
      fr.onload = function(e) {
        success = fileTypes.indexOf(extension) &gt; -1;
        if (success) {
          console.debug("Parsing PDF document...");
          //PDFJS.workerSrc = '&lt;path_to_pdf.worker.js&gt;';
          PDFJS.getDocument(e.target.result).then(function getPdf(pdf) {
            //
            // Fetch the first page
            //
            pdf.getPage(1).then(function getPage(page) {
              var scale = 1.5;
              var viewport = page.getViewport(scale);

              //
              // Prepare canvas using PDF page dimensions
              //
              $(parentEl).append('&lt;canvas id="pdf-image" class="preview"/&gt;');
              var canvas = $(parentEl).find("canvas.preview").get(0);
              var context = canvas.getContext('2d');
              canvas.height = viewport.height;
              canvas.width = viewport.width;

              //
              // Render PDF page into canvas context
              //
              var renderContext = {
                canvasContext: context,
                viewport: viewport
              };
              page.render(renderContext);
            });
          });
        }

      }
      fr.onloadend = function(e) {
        console.debug("Load End");
      }
      fr.readAsArrayBuffer(files[0]);
 }
</code></pre>

<p>You can view or download the <a href="http://plnkr.co/edit/o7j0segKRpjJHwhh8WGO?p=preview"><strong>full example on this plunker</strong></a></p>
]]></content>
  </entry>
  
</feed>
